#!/usr/bin/env python
import gmpy2

from Crypto.Util.number import inverse

n=143661224271538282934263411490131272603833456753971204235968279103542798004441302803974552848856883859791176354833291049666990863339471313555952337006896642145159415985219509121395148933379264849587146674313764289829160921545805590526977907932411553174889936556407801840449447588062279347458475415188345233147

# flag
c=141558773390691288965402676524014435074675156738797831791561387645057829565951034489235458684038874149146627519073036556211386180235230454438582088874458409101773823442089606749138591877490582041051538244869420154887374417266871885445446547108665820004097304244493155210352922415845480819328175306416176528120

e=65537

def fermat_factor(n):
	assert n % 2 != 0

	a = gmpy2.isqrt(n)
	b2 = gmpy2.square(a) - n

	while not gmpy2.is_square(b2):
	    a += 1
	    b2 = gmpy2.square(a) - n

	p = a + gmpy2.isqrt(b2)
	q = a - gmpy2.isqrt(b2)

	return int(p), int(q)

if __name__ == "__main__":
	(p, q) = fermat_factor(n)

	print("p = {}".format(p))
	print("q = {}".format(q))

	phi = (p-1)*(q-1)
	d = inverse (e, phi)
	m = pow (c, d, n)

	print(m)
	print(hex(m))

	hex_string = str(hex(m))[2:]
	bytes_object = bytes.fromhex(hex_string)
	ascii_string = bytes_object.decode("ASCII")

	print(ascii_string)